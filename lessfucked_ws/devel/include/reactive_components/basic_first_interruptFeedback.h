// Generated by gencpp from file reactive_components/basic_first_interruptFeedback.msg
// DO NOT EDIT!


#ifndef REACTIVE_COMPONENTS_MESSAGE_BASIC_FIRST_INTERRUPTFEEDBACK_H
#define REACTIVE_COMPONENTS_MESSAGE_BASIC_FIRST_INTERRUPTFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reactive_components
{
template <class ContainerAllocator>
struct basic_first_interruptFeedback_
{
  typedef basic_first_interruptFeedback_<ContainerAllocator> Type;

  basic_first_interruptFeedback_()
    : feedback_data(0)  {
    }
  basic_first_interruptFeedback_(const ContainerAllocator& _alloc)
    : feedback_data(0)  {
  (void)_alloc;
    }



   typedef int32_t _feedback_data_type;
  _feedback_data_type feedback_data;





  typedef boost::shared_ptr< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct basic_first_interruptFeedback_

typedef ::reactive_components::basic_first_interruptFeedback_<std::allocator<void> > basic_first_interruptFeedback;

typedef boost::shared_ptr< ::reactive_components::basic_first_interruptFeedback > basic_first_interruptFeedbackPtr;
typedef boost::shared_ptr< ::reactive_components::basic_first_interruptFeedback const> basic_first_interruptFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator1> & lhs, const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.feedback_data == rhs.feedback_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator1> & lhs, const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reactive_components

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b330198f62ce536f636cd9f765bf359";
  }

  static const char* value(const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b330198f62ce536ULL;
  static const uint64_t static_value2 = 0xf636cd9f765bf359ULL;
};

template<class ContainerAllocator>
struct DataType< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reactive_components/basic_first_interruptFeedback";
  }

  static const char* value(const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the feedback\n"
"int32 feedback_data\n"
"\n"
;
  }

  static const char* value(const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct basic_first_interruptFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reactive_components::basic_first_interruptFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REACTIVE_COMPONENTS_MESSAGE_BASIC_FIRST_INTERRUPTFEEDBACK_H
