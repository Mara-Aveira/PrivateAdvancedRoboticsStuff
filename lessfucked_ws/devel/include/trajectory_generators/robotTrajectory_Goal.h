// Generated by gencpp from file trajectory_generators/robotTrajectory_Goal.msg
// DO NOT EDIT!


#ifndef TRAJECTORY_GENERATORS_MESSAGE_ROBOTTRAJECTORY_GOAL_H
#define TRAJECTORY_GENERATORS_MESSAGE_ROBOTTRAJECTORY_GOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajectory_generators
{
template <class ContainerAllocator>
struct robotTrajectory_Goal_
{
  typedef robotTrajectory_Goal_<ContainerAllocator> Type;

  robotTrajectory_Goal_()
    : some_goal_data(0)
    , joint_positions()
    , joint_velocities()
    , joint_accelerations()
    , timestamp()  {
    }
  robotTrajectory_Goal_(const ContainerAllocator& _alloc)
    : some_goal_data(0)
    , joint_positions(_alloc)
    , joint_velocities(_alloc)
    , joint_accelerations(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef int32_t _some_goal_data_type;
  _some_goal_data_type some_goal_data;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_positions_type;
  _joint_positions_type joint_positions;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_velocities_type;
  _joint_velocities_type joint_velocities;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_accelerations_type;
  _joint_accelerations_type joint_accelerations;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> const> ConstPtr;

}; // struct robotTrajectory_Goal_

typedef ::trajectory_generators::robotTrajectory_Goal_<std::allocator<void> > robotTrajectory_Goal;

typedef boost::shared_ptr< ::trajectory_generators::robotTrajectory_Goal > robotTrajectory_GoalPtr;
typedef boost::shared_ptr< ::trajectory_generators::robotTrajectory_Goal const> robotTrajectory_GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator1> & lhs, const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator2> & rhs)
{
  return lhs.some_goal_data == rhs.some_goal_data &&
    lhs.joint_positions == rhs.joint_positions &&
    lhs.joint_velocities == rhs.joint_velocities &&
    lhs.joint_accelerations == rhs.joint_accelerations &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator1> & lhs, const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajectory_generators

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47c4fc2645bd1adfeac90d59b052c443";
  }

  static const char* value(const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47c4fc2645bd1adfULL;
  static const uint64_t static_value2 = 0xeac90d59b052c443ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_generators/robotTrajectory_Goal";
  }

  static const char* value(const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"int32 some_goal_data\n"
"float64[] joint_positions\n"
"float64[] joint_velocities\n"
"float64[] joint_accelerations\n"
"time timestamp\n"
;
  }

  static const char* value(const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.some_goal_data);
      stream.next(m.joint_positions);
      stream.next(m.joint_velocities);
      stream.next(m.joint_accelerations);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotTrajectory_Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajectory_generators::robotTrajectory_Goal_<ContainerAllocator>& v)
  {
    s << indent << "some_goal_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.some_goal_data);
    s << indent << "joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      s << indent << "  joint_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_positions[i]);
    }
    s << indent << "joint_velocities[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocities.size(); ++i)
    {
      s << indent << "  joint_velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocities[i]);
    }
    s << indent << "joint_accelerations[]" << std::endl;
    for (size_t i = 0; i < v.joint_accelerations.size(); ++i)
    {
      s << indent << "  joint_accelerations[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_accelerations[i]);
    }
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_GENERATORS_MESSAGE_ROBOTTRAJECTORY_GOAL_H
